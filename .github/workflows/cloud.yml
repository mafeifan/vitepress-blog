# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
env:
  CI: true
  NODE: 16.x
  # google cloud kubernates cluster (GKE)
  PROJECT_ID: ivory-strategy-313903
  GKE_CLUSTER: cluster-1    # Add your cluster name here.
  GKE_ZONE: asia-east2-c  # Add your cluster zone here.
  DEPLOYMENT_NAME: deployment-blog-vuepress # Add your deployment name here.
  IMAGE: finleyma/blog-vuepress
  IMAGE_TAG: $GITHUB_SHA

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # calculate some variables that are used later
    # TAGS="latest,$(date +'%Y%m%d')"
    # TAGS="${TAGS},${BRANCH}-${{ github.run_number }},${GITHUB_SHA:0:7}"
    - name: setup github branch
      run: |
        BRANCH=${GITHUB_REF##*/}
        if [ "$BRANCH" == "master" ]; then
          TAGS="latest"
        else
          TAGS="$BRANCH"
        fi
        TAGS="${TAGS},${BRANCH}-${{ github.run_number }},${GITHUB_SHA:0:7}"
        echo "TAGS=${TAGS}" >> $GITHUB_ENV
        echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV

    - uses: actions/checkout@v2
    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "${{ env.NODE }}"
        cache: 'yarn'

    - name: Install Node dependencies
      run: yarn install

    - name: Run build task
      run: yarn build

    - name: Build the Docker image
      run: docker build --file Dockerfile .

    - name: publish docker image to dockerhub
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: ${{ env.IMAGE }}
        username: finleyma
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        tags: ${{ env.TAGS }}

    - name: Deploy to Server Cloud 2
      uses: easingthemes/ssh-deploy@v2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY2 }}
        ARGS: "-rltgoDzvO --delete"
        SOURCE: "docs/.vuepress/dist/"
        REMOTE_PORT : ${{ secrets.PORT2 }}
        REMOTE_HOST: ${{ secrets.HOST2 }}
        REMOTE_USER: ${{ secrets.USERNAME }}
        TARGET: "/home/ubuntu/blog"

#       # Setup gcloud CLI
#     - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
#       with:
#         service_account_key: ${{ secrets.GKE_SA_KEY }}
#         project_id: ${{ env.PROJECT_ID }}

#       # Configure docker to use the gcloud command-line tool as a credential helper
#     - run: |-
#         gcloud --quiet auth configure-docker

#       # Get the GKE credentials so we can deploy to the cluster
#     - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}

      # Deploy the Docker image to the GKE cluster
      # kubectl set image deployment deployment-blog-vuepress blog-vuepress=finleyma/blog-vuepress:master-87 --record
      #        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
      #        ./kustomize build . | kubectl apply -f -
#    - name: Deploy
#      run: |-
#        kubectl get services -o wide
#        kubectl set image deployment deployment-blog-vuepress blog-vuepress=finleyma/blog-vuepress:${GITHUB_SHA:0:7} --record
#        kubectl rollout history deployment deployment-blog-vuepress

      # Slack Notification
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
      env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
        # 获取频道地址 https://api.slack.com/apps/AA2A5EYBE/incoming-webhooks
        SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}} # required
      if: always() # Pick up events even if the job fails or is canceled.
