## bean的id和name的区别

简单说id优先级更高，id必须唯一，name可以为bean起一个或多个别名

1、每个Bean可以有一个id属性，并可以根据该id在IoC容器中查找该Bean，该id属性值必须在IoC容器中唯一；

2、可以不指定id属性，只指定全限定类名，如：`<bean class = "com.zyh.spring3.hello.StaticBeanFactory"></bean>`
此时需要通过接口 `getBean(Class<T> requiredType)` 来获取Bean；

3、如果不指定id，只指定name，那么name为Bean的标识符，并且需要在容器中**唯一**；

4、同时指定name和id，此时id为标识符，而**name为Bean的别名**，两者都可以找到目标Bean；

5、可以指定多个name，之间可以用分号（“；”）、空格（“ ”）或逗号（“，”）分隔开，如果没有指定id，那么第一个name为标识符，其余的为别名；若指定了id属性，则id为标识符，所有的name均为别名。如：

```xml
<bean name="alias1 alias2;alias3,alias4" id="hello1" class="com.zyh.spring3.hello.HelloWorld">
  <constructor-arg index="0" value="Red"></constructor-arg>
</bean>
```

此时，hello1为标识符，而alias1，alias2，alias3，alias4为别名，它们都可以作为Bean的键值；

6、可以使用<alias>标签指定别名，别名也必须在IoC容器中唯一，如：

```xml
<!--id,唯一标识符， class全限定名，包名+类名， name，别名而且比alias更高级，可以一对多-->
<bean id="user" class="com.king.pojo.User" name="user2,u2">
    <property name="name" value="king"/>
</bean>
```

```xml
<!--别名,用别名也可以实现类的调用-->
<alias name="user" alias="newUser"></alias>
```

7、import, 一般用于团队开发使用，它可以将多个配置文件，导入合并为一个
假设有三个程序员分别复制了不同的类去开发，不同的类需要注册到不同的bean中，此时可以利用import将所有的bean.xml合并成一个总的（applicationContext.xml)

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
    <import resource="beans.xml"/>
    <import resource="beans2.xml"/>
    <import resource="beans3.xml"/>
</beans>
```

## bean scope属性

* singleton: 单例，每个容器有且只有一个唯一的实例，实例被全局共享
* prototype: 多例，每次使用时都是创建一个实例

| Tables        | singleton           | prototype  |
| :----- | :----- |:----- |
| 对象数量     |全局唯一          |存在多个 |
| 实例化时机   | IoC容器启动时     |   getBean()或对象注入 |
| 线程安全问题 | 存在              |   不存在 |
| 执行效率     | 高               |   低|

## 执行顺序

SpringApplicationScopeTest.java
```Java
String[] configLocation = new String[]{"classpath:applicationContextScopeTest.xml"};
// 创建Spring Ioc容器，并根据配置文件在容器中实例化对象
// IoC容器初始化过程中呼实例化scope为单例的bean
ApplicationContext context = new ClassPathXmlApplicationContext(configLocation);

UserService userService1 = context.getBean("userService", UserService.class);
UserService userService2 = context.getBean("userService", UserService.class);
```

```xml
<!-- 执行过程 初始化UserService ->  初始化UserDao -> 调用UserDao的set方法   -->
<beans>
    <bean id="userDao" class="com.imooc.spring.ioc.dao.UserDao" scope="prototype">
    </bean>
    <bean id="userService" class="com.imooc.spring.ioc.service.UserService" scope="singleton">
        <property name="userDao" ref="userDao"/>
    </bean>
</beans>
```

```xml
<!-- 执行过程 初始化UserDao -> 初始化UserService ->  调用UserDao的set方法 -->
<beans>
    <bean id="userDao" class="com.imooc.spring.ioc.dao.UserDao" scope="singleton">
    </bean>
    <bean id="userService" class="com.imooc.spring.ioc.service.UserService" scope="singleton">
        <property name="userDao" ref="userDao"/>
    </bean>
</beans>
```

```xml
<!-- 执行过程 初始化UserService -> 初始化UserDao -> 调用UserDao的set方法 -->
<beans>
    <bean id="userService" class="com.imooc.spring.ioc.service.UserService" scope="singleton">
        <property name="userDao" ref="userDao"/>
    </bean>
    <bean id="userDao" class="com.imooc.spring.ioc.dao.UserDao" scope="singleton">
    </bean>
</beans>
```

## 注解
* @Controller=@RestController+@ResponseBody
